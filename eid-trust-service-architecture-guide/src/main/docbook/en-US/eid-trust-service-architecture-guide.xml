<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC 
	"-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="en">
	<articleinfo>
		<title>Fedict eID Trust Service Developer Guide</title>
		<copyright>
			<year>2008-2010</year>
			<holder>Fedict</holder>
		</copyright>
		<releaseinfo>31 Mar 2010</releaseinfo>
		<authorgroup>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
		</authorgroup>
		<abstract>
			<para>This manual serves as an entry point for setting up the eID
				Trust Service.</para>
		</abstract>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT",
			"RECOMMENDED", "MAY", and "OPTIONAL" in this document (in uppercase,
			as shown) are to be interpreted as described in
			<ulink url="http://www.ietf.org/rfc/rfc2119.txt">[RFC2119]</ulink>
			.
			The eID Trust Service provides two major service artifacts:
			<orderedlist>
				<listitem>
					eID Trust Service portal
					<para>Via this web portal citizens can check the validity of their
						eID certificates.</para>
				</listitem>
				<listitem>
					eID Trust Service validation web service
					<para>Via this SOAP web service Relying Parties (aka Service
						Providers) can check the validity of certificate paths. This web
						service is constructed according to the W3C XKMS2 web service
						standard.</para>
				</listitem>
			</orderedlist>
			Besides these two service artifacts, the eID Trust Service also comes
			with an Admin portal that allows administrators to manage the eID
			Trust Service via an easy to use web portal interface. In the
			following paragraphs we will use $EID_TRUST_SERVICE_ADDRESS as the
			(internal) web address where the eID Trust Service product has been
			deployed.
		</para>
	</section>
	<section>
		<title>Architecture</title>
		<para>
			The architecture of the Fedict eID Trust Service is shown in
			<xref linkend="eid-trust-service-arch" />
			. The details are explained in the subsequent sections.
		</para>
		<figure id="eid-trust-service-arch">
			<title>eID Trust Service Architecture</title>
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata format="PNG" fileref="eid-trust-service-architecture.png"
							scale="75" align="center" />
					</imageobject>
				</mediaobject>
			</screenshot>
		</figure>
		<section>
			<title>OCSP Responder and CRL Repository</title>
			<para>
				The eID Trust Service makes use of the existing online eID
				PKI-services for validation of the certificate paths.
			</para>
		</section>
		<section>
			<title>jTrust</title>
			<para>
				This software component handles the actual PKI-validation,
				using online OCSP- and CRL-services. The internal design of this
				component easily allows to add external trust linkers providing
				scalability. The eID Trust Services does just so by for example
				adding a custom trust linkers maintains a CRL cache.
			</para>
			<para>
				As the jTrust-library makes use of the URI's in the
				certificates for OCSP- and CRL-validation, only limited
				configuration is needed.
			</para>
			<para>
				The source code of this component can be found at:
				<ulink url="http://code.google.com/p/jtrust/">jTrust</ulink>
			</para>
		</section>
		<section>
			<title>Trust Service Model</title>
			<para>
				The eID Trust Service Model is a software module written in the
				EJB3-technology. This module manages trust domains, service
				configuration, certificate revocation cache and more. The jTrust
				module makes use of this certificate revocation cache during
				validation of the certificate path.
			</para>
		</section>
		<section>
			<title>XKMS v2.0</title>
			<para>
				The primairy interfance of the eID Trust Service for Service
				Provides is a web service which is bases on the W3C XKMS v2
				standard. The protocol binding used is HTTP SOAP. Depending on the
				security policy configuration of the eID Trust Service (
				configurable by an administrator ) an application can use this web
				service without service authentication, with unilateral
				TSL-authentication or authentication on message level using signed
				XKMS2 responses.
			</para>
		</section>
		<section>
			<title>SDK</title>
			<para>
				The eID Trust Service SDK allows Service Providers for easy
				integration of the eID Trust Service in (web-)applications. The SDK
				consist of:
				<itemizedlist>
					<listitem>
						A Java-based XKMS2 client reference implementation
					</listitem>
					<listitem>
						A .NET (C#) 2.0 implementation available for both the
						Microsoft
						platform as the Mono platform.
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>eID Applet and eID Applet Service</title>
			<para>
				Using these generic Java-applet based components, developers can
				easily integrate eID functionality in web applications. The eID
				Applet provided full support for the functionalities of the eID
				card. This comprises identification, authentication and adding
				digital signatures. The eID Trust Service makes use of the eID
				Applet within the eID Trust Service Portal and the eID Trust Service
				Admin Portal. The source code for the eID Applet can be found at
				<ulink url="http://code.google.com/p/eid-applet">eID Applet Source Code</ulink>
				.
			</para>
		</section>
		<section>
			<title>Trust Service Portal</title>
			<para>
				Using the eID Trust Service Portal, civilians kan verify the
				functionality of their eID card and validate their eID certificates
				easily. The portal is translated in all national languages and
				English. The user has the ability to select the language manually.
				If not selected manually, the browser default setting will be used.
				The portal furthermore includes an information panel, explaining eID
				certificates and the eID card in general. This information can be
				modified by an administrator in the eID Trust Service Admin Portal.
			</para>
		</section>
		<section>
			<title>Admin Portal</title>
			<para>
				The eID Trust Service Admin Portal allows administratos to manage
				and configure the eID Trust Service. Following configuration is
				possible :
				<itemizedlist>
					<listitem>
						<para>
							Adding, approving and removing administrators.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuration of the WS Security Policy to be used as in if
							outgoing XKMS2 responses should be signed or not and
							configuration of the keystore used for that.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuration of an HTTP network-proxy use by the eID Trust
							Service when accessing the CRL repository and the OCSP responder.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuration of a Clock Drift Detection task. Both NTP as
							TSP is supported.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuration of the information message shown in the eID
							Trust Service Portal, this for all languages that the eID Trust
							Service Portal supports.
						</para>
					</listitem>
					<listitem>
						<para>
							Management of the different trust domains. This consist of:
							<itemizedlist>
								<listitem>
									<para>Adding and removing trust domains</para>
								</listitem>
								<listitem>
									<para>Adding and removing virtual trust domains</para>
								</listitem>
								<listitem>
									<para>Setting the default trust domain. This is the trust
										domain that will be used in the eID Trust Web Service if no
										trust domain was specified.</para>
								</listitem>
								<listitem>
									<para>Selecting trust points within a trust domain</para>
								</listitem>
								<listitem>
									<para>Selecting trust domains within a virtual trust domain
									</para>
								</listitem>
								<listitem>
									<para>Configuring the CRL refresh interval per trust point
									</para>
								</listitem>
								<listitem>
									<para>Configuring certificate constraints per trust domain
									</para>
								</listitem>
								<listitem>
									<para>Configuration if the CRL revocation cache can be used per
										trust domain.</para>
								</listitem>
								<listitem>
									<para>Manually triggering a refresh of the CRL revocation cache
										per trust point. This will trigger a refresh on all CA's below
										that trust point.</para>
								</listitem>
								<listitem>
									<para>Manually triggering a refresh of the CRL revocation cache
										per CA.</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				An administrator authenticates himself within the eID Trust
				Service Admin Portal using his eID card. If no administrator is yet
				registered, the first user that successfully authenticates himself
				will be automatically registered as an administrator. An
				administrator has the possibility to register additional
				administrators. A user can request to be an administrator by
				successfully authentication for the eID Trust Service Admin Portal.
				After doing so, an existing administrator will have the possibility
				to approve this request. The eID administrator token will only be
				checked on public-key match during an login to the eID Trust Service
				Admin Portal. PKI-validation for administrator tokens adds little or
				no added value.
			</para>
		</section>
	</section>
	<section>
		<title>High-level overview</title>
		<para>
			In this section we provide a high-level overview of the eID
			Trust Service design. The design of the eID Trust Service Model is
			inspired on that of ECPV [HM2003].
		</para>
		<section>
			<title>Domain entities</title>
			<para>
				Here we describe the domain entities used in the eID Trust
				Service. JPA v1.0 from the Java EE architecture is used.
			</para>
			<section>
				<title>Trust Domain</title>
				<para>
					A Trust Domain covers a certain PKI topology. For example the
					Belgian eID PKI structure, which consists of trust points Root CA
					and Root CA2, the OIDs of the eID card and the EVK. Different trust
					domains can be defined and configured by an administrator. For each
					trust domain can be configured if CRL caching is allowed to be used
					or not. A default trust domain can be assigned, which will be used
					in requests to the eID Trust Service XKMS2 Web Service if no trust
					domain is explicitely specified.
				</para>
			</section>
			<section>
				<title>Certificate Constraint</title>
				<para>
					Each trust domain can have several certificate constraints
					configured. These can be managed at runtime. Following certificate
					constraints are available:
					<itemizedlist>
						<listitem>
							<para>Distinguished Name Constraint</para>
						</listitem>
						<listitem>
							<para>End Entity Constraint</para>
						</listitem>
						<listitem>
							<para>Key Usage Constraint</para>
						</listitem>
						<listitem>
							<para>Certificate Policy Constraint</para>
						</listitem>
						<listitem>
							<para>QC Statement Constraint</para>
						</listitem>
					</itemizedlist>
				</para>
			</section>
			<section>
				<title>Virtual Trust Domain</title>
				<para>
					A Virtual Trust Domain consists of a set of already defined
					Trust Domains within the eID Trust Service. A positive validation
					within a specified virtual trust domain translates itself to a
					positive validation within at least one of the trust domains of the
					virtual trust domain. This way for example a virtual trust domain
					for Europe containing all trust domains of its members can be
					defined.
				</para>
			</section>
			<section>
				<title>Trust Point</title>
				<para>
					A Trust Point corresponds with a root Certification Authority
					(CA).
					A trust point is allways linked to one ( or more ) trust
					domains. A
					trust point is used by the PKI validator as starting
					point of the
					certificate path validation. The CRL revocation cache
					refresh
					interval can be configured per trust point. Whenever the
					interval
					has passed, a refresh of the CA's revocation cache
					corresponding
					with the trust point, as well as all lower CA's will
					be refreshed.
					An explicit CRL refresh interval is specified as the
					<code>nextUpdate</code>
					field of a CRL is usually not accurate enough on when the next CRL
					is available.
				</para>
			</section>
			<section>
				<title>Certification Authority</title>
				<para>
					A certificate revocation cache is kept per CA. A CA's is not
					necessarily linked to a trust point nor to a trust domain. Per CA a
					record is being kept of the validity of its certificate revocation
					cache entries. This validity interval corresponds with the
					<code>thisUpdate</code>
					and
					<code>nextUpdate</code>
					field of the specific CRL feeding the cache. The validity interval
					is crucial to prevent the PKI validation taking decisions based on
					expired certificate revocation cache entries.
				</para>
			</section>
			<section>
				<title>Certificate Revocation Cache Entry</title>
				<para>
					When a certificate is revoked, this will manifest itself in
					the certificate revocation cache entry in the cache of the
					corresponding CA. This entry holds the issuer, serial number and
					revocation date of the specific certificate.
				</para>
			</section>
			<section>
				<title>Administrator</title>
				<para>
					The eID Trust Service Admin Portal allows for multiple
					administrators. Authentication is done based on the eID card, using
					the public key of the authentication certificate. An
					administrator
					can have a pending status if he yet has to be
					approved by an
					approved administrator.
				</para>
			</section>
			<section>
				<title>Clock Drift Configuration</title>
				<para>
					The eID Trust Service has a clock drift detection task
					running. The interval of the task can be configured using a cron
					expression. Both NTP and TSP are supported.
				</para>
			</section>
			<section>
				<title>WS Security Configuration</title>
				<para>Whether or not eID Trust Service XKMS2 responses should be
					signed or not can be configured at runtime, as well as the keystore
					being used for that purpose.</para>
			</section>
		</section>
		<section>
			<title>eID Trust Service Model</title>
			<para>
				The design of the eID Trust Service Model is shown in
				<xref linkend="eid-trust-service-model" />
				The implementation makes use of the EJB 3.0 framework.
			</para>
			<figure id="eid-trust-service-model">
				<title>eID Trust Service Model</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata format="PNG" fileref="eid-trust-service-model.png"
								scale="75" align="center" />
						</imageobject>
					</mediaobject>
				</screenshot>
			</figure>
			<section>
				<title>Entry Point</title>
				<para>
					The entry point comes with a TrustService facade-component.
					This component provides functionality to validate a given
					certificate path. The validation logic provides a fall-back
					strategy towards the used certificate revocation data source. At
					first a check is done if, for the specific CA, local certficate
					revocation data is available in the certificate revocation data
					cache. If not so, a classical PKI-validation will be performed
					using following certificate revocation check:
					The OCSP responder is
					consulted. If none exists for this CA or the request
					failed
					fall-back is done using the CRL of the CA.
				</para>
				<para>
					At the same time, a harvester-component is being informed of
					the missing certificate
					revocation data cache entries for the CA.
					The communication between
					the front-end component en the background
					harvester component is being done using a JMS queue.
				</para>
				<para>
					If existing certificate revocation data cache entries are
					available ( and usable, i.e. freshness verification ) for the CA,
					then those will be used. In this case there is no need for the eID
					Trust Service to consult online OCSP and/or CRL PKI-services.
				</para>
			</section>
			<section>
				<title>Harvester</title>
				<para>
					The harvester is implemented as an EJB3 Message Driven Bean
					(MDB). It receives messages from the front-end service-components
					via the harvester JMS-queue, triggering it to start harvesting.
				</para>
				<para>
					The harvester downloads the CRL of the specified CA, verifies
					its validity and processes the local certificate revocation data
					cache. After this, the harvester activates the certficate
					revocation cache for the specified CA. Future certificate-path
					validations can now make use of this.
				</para>
				<para>
					The advantage of an MDB-based harvester is that the JMS
					architecture provides automatic retry in case of failure to
					download and/or process the CRL. Therefor no extra logic has to be
					implemented in the harvester to support this.
				</para>
				<para>
					Besides harvesting CRLs for revocation data, the harvester MDB
					also handles the clock drift detection task.
				</para>
			</section>
			<section>
				<title>Scheduler</title>
				<para>
					The scheduler is responsible for the frequent updating of the
					certificate revocation cache and clock drift detection.
				</para>
				<para>
					It is driven by the Java EE Timer Service. The benefit of this
					is the transactional aspect. The scheduler will also, when finished
					with this tasks, reprogram the Java EE Timer.
				</para>
				<para>
					Updating of the certificate revocation cache occurs so no
					running front-end certification path validations experience
					nuisance of this. Therefor there is global cache lock or cache lock
					with CA granularity.
				</para>
				<para>
					The certificate revocation cache refresh interval is set per
					trust point. The scheduler can be manually actived by an
					administrator via a short reprogrammation of the corresponding Java
					EE Timer.
				</para>
				<para>
					The validity interval, kept per CA, is crucial to prevent
					PKI-validation taking decisions based on old certificate revocation
					data (in case something went wrong with the scheduler). As both the
					harvester as the scheduler are managed by a container transaction
					manager, consistency between cache entries en the validity interval
					is guaranteed.
				</para>
				<para>
					Besides scheduling certificate revocation cache refreshes, the
					scheduler also handles the clock drift detection task in the same
					manner. When the corresponding Java EE Timer is fired, the clock
					drift configuration is fetched from database and an NTP or TSP
					request is performed.
				</para>
			</section>
			<section>
				<title>Certificate Revocation Cache</title>
				<para>
					Due to the coordinated activities of the harvester and the
					scheduler, the certification revocation cache only contains data
					for CA's that are used actively by the Service Provider
					applications. The system adds during execution automatically new
					CA's to the revocation data cache. This has a positive impact on
					the maintenance of the eID Trust Service. It is not necessary for
					the system, during bootstrapping, to iterate over all CA's en
					process the corresponding CRL's into the revocation data cache.
					Automatic maintenance of the cache happens transparently to the
					Service Provider applications.
				</para>
			</section>
			<section>
				<title>Time</title>
				<para>
					Correctness of the time is critical in a PKI-validation ( OCSP
					and CRL freshness checks ). The eID Trust Service Model contains a
					clock drift detection task ( managed by a Java EE Timer ) that
					periodically checks the correctness of the local machine clock.
					This can be done using an NTP- or TSP-service. Location, timeout
					and maximum skew can be configured by an administrator in the eID
					Trust Service Admin Portal.
				</para>
			</section>
		</section>
		<section>
			<title>JAX-WS Web Service Runtime</title>
			<para>
				The eID Trust Service uses JAX-WS 2.1 RI as runtime for the XKMS v2
				web service.
				The used JAX-WS runtime setup is shown in
				<xref linkend="eid-trust-service-jaxws-runtime" />
				The implementation makes use of the EJB 3.0 framework.
			</para>
			<figure id="eid-trust-service-jaxws-runtime">
				<title>eID Trust Service JAX-WS Web Service Runtime</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata format="PNG" fileref="eid-trust-service-jaxws-runtime.png"
								scale="75" align="center" />
						</imageobject>
					</mediaobject>
				</screenshot>
			</figure>
			<para>
				A WSDL-first development strategy was used as WSDL/XSD is the
				primary contract between client and server. A client SDK provides
				integration of the eID Trust Service and SOA applications. Both a
				Java client SDK as a .NET v2.0 (C#) client SDK are provided.
			</para>
			<para>
				The JAX-WS runtime runs within the servlet container. Acquiring
				an EJB3 reference to the service facade session EJB3 beans is kept
				as generic as possible. A Java EE ServletContextListener is used
				where, using standard EJB3 injection, references to the necessary
				services is acquired. Subsequently a custom JAX-WS RI
				InstancResolver is used to inject these service references into the
				JAX-WS endpoints. This setup makes us indepdendent of the used
				application server.
			</para>
			<para>
				The optional XKMS2 response WS-Security signature is added
				using a JAX-WS SOAPHandler that is configured in the JAX-WS handler
				chain of the endpoints.
			</para>
			<para>
				Despite JAX-WS RI having an integration API for Java EE
				containers, we chose to not (yet) use this. We also chose not to
				implement the XKMS2 web service as an EJB3 JAX-WS endpoint but as a
				POJO JAX-WS endpoint. This to prevent a stronger dependence on used
				Java EE application server ( for example when using JBossWS).
			</para>
		</section>
		<section>
			<title>Web Portals</title>
			<para>
				The web portals are using JSF as view-technology (as in MVC).
				We use the JSF 1.2 RI. Templating is provided by Facelets. Richfaces
				is used for its wide range of AJAX-aware JSF components.
			</para>
			<para>
				Binding with back-end components is achieved using the JBoss
				Seam component-lifecycle-technology. For testing the web-UI,
				Selenium is used.
			</para>
		</section>
		<section>
			<title>Java EE Application Aspects</title>
			<section>
				<title>Security</title>
				<para>
					As security model in the eID Trust Service Admin Portal, a
					two-trap security model is used. Besides the servlet-container
					knowing about login/logout, the model components use the standard
					EJB3 security framework. A JAAS login module assigns the necessary
					roles to a Principal, so the EJB3 authorization interceptor can do
					its job.
				</para>
				<para>Such a security model has the benefit that penetration of the
					front-end does not implicate penetration of the service component
					as they are seperated because of the independent role assignment by
					the JAAS login module.</para>
			</section>
			<section>
				<title>Persistence</title>
				<para>
					Persistence mapping is done by the Java EE JPA 1.0 API.
					Benefit of this is the maintainebility of the database schema. All
					necessary meta-data ( e.g. indexes ) is expressed using Java 5
					annotations. The underlying JPA-engine ( e.g. Hibernate ) must be
					able to interprete this meta-data correctly for database schema
					generation. This is important to keep the JPA entities as authentic
					souce for the database schema.
				</para>
				<para>
					Besides the ability of running on top of a standard HSQL JBoss
					distribution, a custom MySQL and Oracle distribution if provided.
				</para>
			</section>
			<section>
				<title>Build system</title>
				<para>
					As build-system, Apache Maven v2.0 or v2.2 is used. To deploy the
					Java EE application to a locally running Application Server, simply
					execute:
					<code>mvn jboss:deploy</code>
					.
				</para>
				<para>
					The build system is split up so different Java EE modules are
					produces as individual artifacts as is shown in
					<xref linkend="eid-trust-service-build-system" />
				</para>
				<figure id="eid-trust-service-build-system">
					<title>eID Trust Service Build System</title>
					<screenshot>
						<mediaobject>
							<imageobject>
								<imagedata format="PNG" fileref="eid-trust-service-build-system.png"
									scale="75" align="center" />
							</imageobject>
						</mediaobject>
					</screenshot>
				</figure>
				<para>
					Via the top-level pom.xml we group the different artifacts in
					build-profiles and manage de software dependencies' versions of the
					project.
				</para>
			</section>
			<section>
				<title>Build configurations</title>
				<para>
					Different Maven-profiles, activate different configurations.
					By
					default the development configuration is active. Other profiles are
					for example
					<code>prod-mysql</code>
					and
					<code>prod-oracle</code>
					which will on top of the default artifacts, build an artifact
					containing a custom JBoss MySQL respectively Oracle distribution.
					Another profile named
					<code>sdk</code>
					will trigger generate of an SDK zip, containing the SDK, the
					javadocs, a directory with all necessary dependencies and this
					development guide.
				</para>
				<para>
					The profiles can be triggered via:
					<code>mvn -Denv=sdk clean install</code>
					.
				</para>
			</section>
		</section>
	</section>
	<section>
		<title>Web Service Specifications</title>
		<para>
			This section gives an overview of the eID Trust Service XKMS2 web
			service. For a detailed overview of the XKMS v2.0 specification
			please go to:
			<ulink url="http://www.w3.org/TR/xkms2/">XKMS v2.0</ulink>
			. The eID Trust Service covers only a portion of the XKMS v2.0
			specification as it only supports validation requests.
		</para>
		<para>
			In its most minimal configuration, a client can specify a
			certificate
			path for validation. The eID Trust Service will then
			perform a
			PKI-validation against the configuration default Trust
			Domain. The
			XKMS2-request will then be
			<programlisting role="text"><![CDATA[
soap:Envelope/soap:Body/xkms2:ValidateRequest/xkms2:QueryKeyBinding/ds:KeyInfo/ds:X509Data/ds:X509Certificate
			]]></programlisting>
			where the client adds the X509 certificate elements in the
			certificate path to be validated. After validation, the eID Trust
			Service XKMS2 web service answers with following XKMS2 response:
			<programlisting role="text"><![CDATA[
soap:Envelope/soap:Body/xkms2:ValidateResult/xkms2:KeyBinding/xkms2:Status/@StatusValue=http://www.w3.org/2002/03/xkms#Valid
			]]></programlisting>
			.
			In case the validation was invalid, a similar response but with
			StatusValue
			<code>Invalid</code>
			will be returned. Additionally the Status will element will contain 1
			or more XKMS2 Reason URI's why the validation has failed. Check out
			the
			<ulink url="http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_5_1">XKMS2 Key Binding Specification</ulink>
			for more details on the Status element.
		</para>
		<para>
			Please take not that we take on the assumption that the client
			allways provides the full certificate path and the eID Trust Service
			does not handle construction of certificate paths.
		</para>
		<para>
			If the client wishes to validate its certificate path against a
			Trust
			Domain not equal to the configured default Trust Domain, it has
			the
			option to specify the name of that Trust Domain. The client will
			in
			that case add, as the XKMS2 specficiation dictates, following
			element
			to the request:
			<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:UseKeyWith@Application=urn:be:fedict:trust:trust-domain@Identifier=<trust-domain-name>
			]]></programlisting>
			.
		</para>
		<section>
			<title>Service Authentication</title>
			<para>
				Service authentication for the web service client has 3 different
				options:
				<orderedlist>
					<listitem>
						<para>
							The client software does not require any service
							authentication. This is the case when the client software has a
							dedicated connection with the eID Trust Service.
						</para>
					</listitem>
					<listitem>
						<para>
							Service authentication using unilateral TLS authentication.
							The client has this option by specifying the eID Trust Service
							server certfifcate for validation.
						</para>
					</listitem>
					<listitem>
						<para>
							Service authentication using signed XKMS2 responses. This
							option has to be explicitly configured within the eID Trust
							Service Admin Portal as adding the WS-Security signature adds a
							significant performance impact.
						</para>
					</listitem>
				</orderedlist>
			</para>
		</section>
		<section>
			<title>Revocation Data</title>
			<para>
				It is possible to instruct the eID Trust Service XKMS2 web
				service to
				return the used revocation data (OCSP respones and/or
				CRL's) during
				the PKI-validation. This can be usefull for
				non-repudiation
				certificate paths where this data will be used to
				finalize a XAdES
				signature. An
				<code>xkms2:MessageExtension</code>
				element is therefor introduced containing the ETSI XAdES v1.3.2
				<code>RevocationValues</code>
				element that will hold this data if requested.
			</para>
			<para>
				If revocation data is requested, the eID Trust Service will not
				use locally cached certificate revocation data, but will perform an
				onliny PKI-validation (OCSP/CRL) as recent certificate revocation
				data is required in the response. This is important for XAdES
				signatures.
			</para>
			<para>
				To specify a request to return the used revocation data, following
				element will be added to the request:
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:RespondWith/urn:be:fedict:trust:revocation-data
				]]></programlisting>
				.
			</para>
		</section>
		<section>
			<title>Historical Validation</title>
			<para>
				It is possible to perform historical validations on certificate
				paths. To do so the
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:TimeInstant
				]]></programlisting>
				element containing the time at which to validate the given
				certificate path, will be added. The necessary revocation data (OCSP
				responses and/or CRL's) will off course be required to be added by
				the client itself in the XKMS2 request. To do so the same
				<code>xkms2:MessageExtension</code>
				used to return used revocation data will be used, being the ETSI
				XAdES v1.3.2
				<code>RevocationValues</code>
				element.
			</para>
			<para>
				Historical validations are usefull in the context of
				verification of ETSI XAdES v.1.3.2 digital signatures, focussed on
				XAdES-X-L signatures. XAdES-A signatures are not taken into account.
			</para>
		</section>
		<section>
			<title>TSA certificates</title>
			<para>
				It is possible the validate TSA certificates using the eID
				Trust Service XKMS2 web service. This is important for XAdES-T
				signatures.
			</para>
			<para>
				To do so, another
				<code>xkms2:MessageExtension</code>
				has been introduced, namely the
				<code>TSAMessageExtension</code>
				. This extension contains an element of type
				<code>xades:EncapsulatedPKIDataType</code>
				containing the encoded Timestamp Token returned by a timestamp
				request. Off course this token will have to contain the certificate
				path of the used TSA certificate.
			</para>
			<para>
				The eID Trust Service will perform a PKI validation of the
				contained
				certificate path against the TSA Trust Domain configured
				in the eID
				Trust Service and specified with
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:UseKeyWith@Application=urn:be:fedict:trust:tsa@Identifier=<tsa-trust-domain-name>
				]]></programlisting>
				. Additionally it will verify that the TSA certificate contains the
				<code>ExtendedKeyUsage</code>
				extension with key purpose identifier
				<code>id-kp-timeStamping</code>
				.
			</para>
		</section>
		<section>
			<title>Attribute certificates</title>
			<para>
				It is possible to validate Attribute certificates using the eID
				Trust Service XKMS2 web service.
			</para>
		</section>
	</section>
	<appendix>
		<title>eID Trust Service Developer Guide License</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc.logo.large.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the Creative Commons license.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="share.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You are free to Share — to copy, distribute and transmit the work.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="by.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You must attribute the work in the manner specified by the author or
			licensor (but not in any way that suggests that they endorse you or
			your use of the work).
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nc.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not use this work for commercial purposes.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nd.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not alter, transform, or build upon this work.
		</para>
		<para>
			More information about the Creative Commons license conditions can be
			found at
			<ulink url="http://creativecommons.org/">Creative Commons organization</ulink>
			.
		</para>
	</appendix>
	<appendix>
		<title>eID Trust Service License</title>
		<para>The eID Trust Service source code has been released under the
			GNU LGPL version 3.0.</para>
		<para>
			<code>This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version
				3.0
				as published by the Free Software Foundation.

				This software is
				distributed in the hope that it will be useful,
				but WITHOUT ANY
				WARRANTY; without even the implied warranty of
				MERCHANTABILITY or
				FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public
				License for more details.

				You should have received a copy of the GNU
				Lesser General Public
				License along with this software; if not, see
				http://www.gnu.org/licenses/.</code>
		</para>
	</appendix>
	<appendix>
		<title>Revision history</title>
		<table>
			<title>Revision history</title>
			<tgroup cols="3">
				<colspec colwidth="1*" />
				<colspec colwidth="1*" />
				<colspec colwidth="2*" />
				<thead>
					<row>
						<entry>Date</entry>
						<entry>Author</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>31 Mar 2010</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>Initial version.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</appendix>
</article>
