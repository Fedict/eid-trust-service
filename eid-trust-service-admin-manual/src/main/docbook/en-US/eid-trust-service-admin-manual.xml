<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC
	"-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="en">
	<articleinfo>
		<title>Fedict eID Trust Service Administrator Manual</title>
		<subtitle>
			Version &project.version;
		</subtitle>
		<copyright>
			<year>2010-2012</year>
			<holder>Fedict</holder>
		</copyright>
		<releaseinfo>29 Jun 2012</releaseinfo>
		<authorgroup>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
			</author>
		</authorgroup>
		<abstract>
			<para>
				This manual serves as an entry point for setting up the eID
				Trust Service. The target audience is system administrators.
			</para>
		</abstract>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT",
			"RECOMMENDED", "MAY", and "OPTIONAL" in this document (in uppercase,
			as shown) are to be interpreted as described in
			<ulink url="http://www.ietf.org/rfc/rfc2119.txt">[RFC2119]</ulink>
			.
		</para>
		<para>
			The eID Trust Service provides two major services:
			<orderedlist>
				<listitem>
					<para>
						eID Trust Service portal
					</para>
					<para>
						Via this web portal citizens can check the validity of their
						eID certificates.
					</para>
				</listitem>
				<listitem>
					<para>
						eID Trust Service validation web service
					</para>
					<para>
						Via this SOAP web service Relying Parties (aka Service
						Providers) can check the validity of certificate chains. This web
						service has been implemented according to the W3C XKMS2 web
						service standard.
					</para>
				</listitem>
			</orderedlist>
			Besides these two service artifacts, the eID Trust Service also comes
			with an Admin portal. This portal allows administrators to manage the
			eID Trust Service via an easy to use interface. In the following
			sections we will use
			<code>$EID_TRUST_SERVICE_ADDRESS</code>
			as the (internal) web address where the eID Trust Service has been
			deployed.
		</para>
		<para>
			The source code of the Fedict eID Trust Service is publicly available
			and can be found at
			<ulink url="http://code.google.com/p/eid-trust-service/source/checkout">eID Trust Service Source Code</ulink>
			. The Fedict eID Trust Service has dependencies on jTrust, a Java
			library for trust validation of X509 certificates. This library can
			be found at
			<ulink url="http://code.google.com/p/jtrust/source/checkout">jTrust source code</ulink>
			. The Fedict eID Trust Service also has a dependency on the eID
			Applet project. This project can be found at
			<ulink url="http://code.google.com/p/eid-applet/source/checkout">eID Applet Project page</ulink>
			.
		</para>
		<section>
			<title>Apache configuration under Redhat (Fedora)</title>
			<para>
				The eID Trust Service runs on a JBoss 6.1 application server.
			</para>
			<warning>
				<title>Application Server Security</title>
				<para>
					Proper firewalling/front-end protection should be put in place to
					prevent unauthorized access towards the application server. In a
					production environment special care should be given not to expose
					the entire context path, i.e.
					<code>/</code>
					, towards the internet. This would allow anyone to deploy Java EE
					application via the JBoss JMX Console. A commonly used front-end is
					the Apache HTTPD web service.
				</para>
			</warning>
			<para>
				We assume that you have installed a vanilla RedHat/CentOS operating
				system. Activate the Apache HTTP Service via:
				<programlisting><![CDATA[sudo chkconfig --level 345 httpd on
chkconfig --list httpd
sudo /etc/init.d/httpd restart]]></programlisting>
				In case you terminate the unilateral SSL on Apache, you need to
				install the SSL module via:
				<programlisting><![CDATA[sudo yum install mod_ssl.i686]]></programlisting>
			</para>
		</section>
		<section>
			<title>iptables configuration under RedHat</title>
			<para>
				Open up the iptables firewall on the Apache server to allow for both
				HTTP (port 80) and HTTPS (port 443). Relevant iptables configuration
				lines (under
				<code>/etc/sysconfig/iptables</code>
				) are:
				<programlisting><![CDATA[-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT]]></programlisting>
				Check the firewall setting on Redhat (Fedora) via:
				<programlisting><![CDATA[sudo cat /etc/sysconfig/iptables]]></programlisting>
				On RedHat/CentOS you can also configure the firewall via:
				<programlisting><![CDATA[system-config-firewall-tui]]></programlisting>
				Disable the NetworkManager via (Fedora only):
				<programlisting><![CDATA[sudo /etc/init.d/NetworkManager stop
sudo chkconfig --level 2345 NetworkManager off
chkconfig --list NetworkManager
sudo reboot]]></programlisting>
				Enable the (static) network management via:
				<programlisting><![CDATA[sudo chkconfig --level 345 network on
chkconfig --list network]]></programlisting>
				and check whether the levels 3, 4, and 5 are on.
			</para>
			<para>
				The default network configuration can be found under:
				<programlisting><![CDATA[/etc/sysconfig/network-scripts/ifcfg-eth0]]></programlisting>
			</para>
		</section>
		<section>
			<title>eID Trust Service Portal</title>
			<para>
				After deployment of the eID Trust Service product, the eID Trust
				Service Portal is available at
				<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-portal/</code>
				. This web portal MUST be accessed over unilateral SSL. If not, the
				eID Applet will refuse to operate. The SSL SHOULD be terminated on
				the front-end Apache HTTPD service so that the SSL information can
				be communicated to the JBoss Application Service over the AJP
				protocol. If such a setup is not possible this SHOULD be clearly
				communicated in advance to the eID Trust Service development team so
				they can properly configure the eID Applet Service that is used
				within the eID Trust Service Portal.
			</para>
			<para>
				Add the following configuration to your Apache HTTPD service to
				accomplish this:
				<programlisting><![CDATA[<IfModule mod_proxy_ajp.c>
                ProxyVia On

                <Location /eid-trust-service-portal>
                        Order allow,deny
                        Allow from all
                        ProxyPass ajp://localhost:8009/eid-trust-service-portal
                </Location>

                <Location /eid-trust-service-admin-portal>
                        Order allow,deny
                        Allow from all
                        ProxyPass ajp://localhost:8009/eid-trust-service-admin-portal
                </Location>

                <Location /eid-trust-service-ws>
                        Order allow,deny
                        Allow from all
                        ProxyPass ajp://localhost:8009/eid-trust-service-ws
                </Location>
                
                <Location /eid-trust-service-ocsp>
                        Order allow,deny
                        Allow from all
                        ProxyPass ajp://localhost:8009/eid-trust-service-ocsp
                </Location>
</IfModule>]]></programlisting>
				For Redhat (Fedora) you add this file under
				<code>/etc/httpd/conf.d/trust-service.conf</code>
				.
			</para>
			<para>
				Restart Apache via:
				<programlisting><![CDATA[sudo /etc/init.dhttpd restart]]></programlisting>
				or via:
				<programlisting><![CDATA[sudo service httpd restart]]></programlisting>
			</para>
			<para>
				If you don't want to use the AJP protocol between the Apache web
				server and the JBoss application server, you can use the following
				configuration.
				<programlisting><![CDATA[<IfModule mod_proxy_ajp.c>
	ProxyRequests Off

	<Location /eid-trust-service-portal>
		Order allow,deny
		Allow from all
		ProxyPass http://localhost:8080/eid-trust-service-portal
		ProxyPass http://localhost:8080/eid-trust-service-portal
	</Location>

	<Location /eid-trust-service-admin-portal>
		Order allow,deny
		Allow from all
		ProxyPass http://localhost:8080/eid-trust-service-admin-portal
		ProxyPassReverse http://localhost:8080/eid-trust-service-admin-portal
	</Location>

	<Location /eid-trust-service-ws>
		Order allow,deny
		Allow from all
		ProxyPass http://localhost:8080/eid-trust-service-ws
	</Location>
</IfModule>]]></programlisting>
			</para>
		</section>
		<section>
			<title>eID Trust Service Validation Web Service</title>
			<para>
				After deployment of the eID Trust Service product, the eID Trust
				Service validation web service is available at
				<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-ws/xkms2</code>
				. This SOAP web service MUST be accessible via both HTTP and HTTPS
				(unilateral SSL). When this web service is accessed over plain HTTP,
				the service provides the possibility to sign the response messages
				using WS-Security. This can be configured via the Administrator
				portal.
			</para>
		</section>
		<section>
			<title>eID Trust Service Admin Portal</title>
			<para>
				After deployment of the eID Trust Service, the eID Trust Service
				Admin Portal is available via:
				<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-admin-portal/
				</code>
				. This web portal MUST be accessed over unilateral SSL. If not, the
				eID Applet will refuse to operate.
			</para>
			<warning>
				<title>Administrator Registrations</title>
				<para>
					After a first start up of the eID Trust Service you need to
					register yourself an administrator by logging in into the eID Trust
					Service admin portal. Multiple administrators are possible.
				</para>
			</warning>
		</section>
		<section>
			<title>SNMP</title>
			<para>
				The eID Trust Service yields different SNMP counters on port
				7894 (UDP).
			</para>
		</section>
		<section>
			<title>Database</title>
			<para>
				The eID Trust Service product requires a relational database to
				operate. The application server requires the proper JDBC driver to
				access the DBMS.
			</para>
		</section>
		<section>
			<title>Java Virtual Machine</title>
			<para>
				You need to have Java Sun 1.6.0_33 or higher installed. JDK or JRE
				are sufficient. These can be found at:
				<ulink url="http://www.java.com/en/download/index.jsp">Java download</ulink>
				. After installation you will have to make sure that the environment
				variable
				<code>$JAVA_HOME</code>
				is properly set and the
				<code>java</code>
				program is available in the
				<code>$PATH</code>
				. Under Redhat (Fedora) you can create a
				<code>/etc/profile.d/java.sh</code>
				file containing the following:
				<programlisting><![CDATA[export JAVA_HOME=/usr/local/jdk1.6
export PATH=$JAVA_HOME/bin:$PATH]]></programlisting>
				Where we assume that you installed the JDK under
				<code>/usr/local/jdk1.6</code>
				. Check whether Sun Java 1.6.0_33+ is installed via the following
				command:
				<programlisting><![CDATA[java -version]]></programlisting>
			</para>
			<para>
				The eID Trust Service also has been tested on a Java 7 runtime.
				If you want to run the eID services on a Java 7 runtime, we
				recommend Java 7u9+. In the past, previous versions of the JVM
				resulted in various errors.
			</para>
		</section>
		<section>
			<title>JBoss Application Server</title>
			<para>
				The JBoss Application Server offers:
				<itemizedlist>
					<listitem>
						<para>AJP at port: 8009</para>
					</listitem>
					<listitem>
						<para>HTTP at port: 8080</para>
					</listitem>
					<listitem>
						<para>HTTPS at port: 8443</para>
					</listitem>
				</itemizedlist>
				AJP is preferred for the connection between the front-end Apache
				HTTPD and the JBoss Application Server.
			</para>
			<para>
				The JBoss application server comes with an SSL configuration
				using a self-signed certificate. This SSL configuration is for
				testing purposes only and SHOULD NOT be used in production
				environments.
			</para>
		</section>
	</section>
	<section>
		<title>Installation</title>
		<para>
			This chapter explains how to install the Fedict eID Trust
			Service application.
		</para>
		<para>
			The Fedict eID Trust Service application server is based on the
			<ulink url="http://www.jboss.org/jbossas">JBoss Application Server</ulink>
			version 6.1.0.Final. The eID Trust Service comes in pre-packaged
			distributions containing a functional application server targetting a
			specific database product.
		</para>
		<para>
			The Fedict eID Trust Service application is delivered in a customized
			database specific zip file. When unpacking this zip file, you will
			notice 2 directories:
			<code>jboss</code>
			and
			<code>sql</code>
			. The
			<code>jboss</code>
			directory contains the JBoss application server, configured for your
			DBMS product and pre-packaged with the Fedict eID Trust Service
			application. The
			<code>sql</code>
			directory contains the database initialization scripts. MySQL,
			PostgreSQL and Oracle are supported.
		</para>
		<para>
			It is also possible to run the Fedict eID Trust Service
			application using HSQLDB, which is the default configured database
			for the JBoss Application Server. You will have to use the JBoss
			distribution from the Fedict eID Application Server project. This
			customized distribution has all necessary dependencies included to
			run the Fedict eID Trust Service. Please note that it is not
			recommended to use this setup in a production environment. The HSQLDB
			database product is not suited for production deployments. This setup
			should only be used for development and testing purposes.
		</para>
		<section>
			<title>Database setup</title>
			<para>
				Before starting the JBoss Application Server you have to initialize
				your database. The initialization scripts can be found in the
				<code>sql</code>
				directory. There are 3 scripts: one to create the database account,
				one to create the Fedict eID Trust Service database, and one to
				initialize its tables. The default username/password for the
				<code>trust</code>
				database is
				<code>trust/trust</code>
				. Please note that if you change this, you have to manually modify
				the datasource configuration in the JBoss AS distribution. This
				configuration can be found in
				<code>jboss/server/all/deploy/trust-service-ds.xml</code>
				or
				<code>jboss/server/default/deploy/trust-service-ds.xml</code>
				, depending on the JBoss configuration that you prefer.
			</para>
			<para>
				The Fedict eID Trust Service has been successfully tested on:
				<itemizedlist>
					<listitem>
						<para>MySQL v5.0 and v5.1</para>
					</listitem>
					<listitem>
						<para>Oracle 10.2.0.1.0</para>
					</listitem>
					<listitem>
						<para>PostgreSQL 8.4.5</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>MySQL database setup on Redhat (Fedora)</title>
			<para>
				The following is needed for setting up the MySQL database on Redhat
				(Fedora):
				<programlisting><![CDATA[sudo yum install mysql-server.i686
sudo /etc/init.d/mysqld start
sudo mysql_secure_installation
mysql -u root -p < mysql-create-account.sql
mysql -u trust -p < mysql-create-database.sql
mysql -u trust -p trust < mysql-trust-service-ddl.sql]]></programlisting>
				Check the availability of the MySQL DBMS via:
				<programlisting><![CDATA[mysql -u trust -p trust
SHOW tables;
QUIT;]]></programlisting>
				Check whether the MySQL service is started at boot time via:
				<programlisting><![CDATA[chkconfig --list mysqld]]></programlisting>
				Enable the MySQL service via:
				<programlisting><![CDATA[sudo chkconfig --level 345 mysqld on]]></programlisting>
				Drop an existing MySQL database via:
				<programlisting><![CDATA[mysql -u trust -p
DROP DATABASE trust;
QUIT;]]></programlisting>
			</para>
		</section>
		<section>
			<title>Oracle database setup on Debian</title>
			<para>
				Download the Oracle 10g Release 2 package @
				<ulink
					url="http://www.oracle.com/technology/software/products/database/xe/htdocs/102xelinsoft.html">Oracle 10g Release 2</ulink>
				. For further installation please check out
				<ulink
					url="http://www.oracle.com/technology/tech/linux/install/xe-on-kubuntu.html">Oracle installation on Debian</ulink>
				. The
				<code>sql</code>
				directory contains initialization scripts for setting up an Oracle
				tablespace in the default XE database. Simply execute:
				<programlisting><![CDATA[sqlplus @oracle-init-trust-service.sql]]></programlisting>
				This might require setting some environment variables:
				<programlisting><![CDATA[export ORACLE_HOME=/usr/lib/oracle/xe/app/oracle/product/10.2.0/server
export PATH=$ORACLE_HOME/bin:$PATH]]></programlisting>
				Check the database via:
				<programlisting><![CDATA[sqlplus trust/trust;
SQL> select table_name from user_tables;
SQL> exit]]></programlisting>
			</para>
			<warning>
				<title>Oracle permissions</title>
				<para>
					As the JBoss Oracle distribution is configured for an XA
					datasource some extra permissions are required to be granted to the
					trust database user. The oracle-create-account.sql script does this
					for you but is preconfigured for Oracle 10g Release 2 without patch
					for bug 5945463. For later versions the grant on sys.dbms_system
					needs to be changed to sys.dbms_xa.
				</para>
			</warning>
		</section>
		<section>
			<title>PostgreSQL database setup on Redhat (Fedora)</title>
			<para>
				The following is needed for setting up the PostgreSQL database on
				Redhat (Fedora):
				<programlisting><![CDATA[sudo yum install postgresql-server.i686
sudo service postgresql initdb
sudo /etc/init.d/postgresql start]]></programlisting>
			</para>
			<para>
				Check whether the PostgreSQL service is started at boot time
				via:
				<programlisting><![CDATA[chkconfig --list postgresql]]></programlisting>
			</para>
			<para>
				Enable the PostgreSQL service via:
				<programlisting><![CDATA[sudo chkconfig --level 345 postgresql on]]></programlisting>
			</para>
			<para>
				As JPA requires prepared transactions, we need to enable this
				feature on the PostgreSQL database. Change the PostgreSQL
				configuration file
				<code>/var/lib/pgsql/data/postgresql.conf</code>
				:
				<programlisting><![CDATA[max_prepared_transactions = 10]]></programlisting>
			</para>
			<para>
				Change the PostgreSQL client authentication by editing the following
				lines in
				<code>/var/lib/pgsql/data/pg_hba.conf</code>
				:
				<programlisting><![CDATA[local	all 	all						md5
host	all		all 	127.0.0.1/32	md5]]></programlisting>
				Of course this assumes that the JBoss application server and the
				PostgreSQL DBMS are running on the same machine.
			</para>
			<para>
				Create a PostgreSQL user and database via:
				<programlisting><![CDATA[psql -U postgres < postgresql-create-account-database.sql]]></programlisting>
			</para>
			<para>
				Create the eID Trust Service tables in the PostgreSQL trust database
				via:
				<programlisting><![CDATA[psql -d trust -U trust -W -f postgresql-trust-service-ddl.sql]]></programlisting>
			</para>
			<para>
				Check the database via:
				<programlisting><![CDATA[psql -d trust -U trust
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';
\q]]></programlisting>
			</para>
			<para>
				Drop an existing database via:
				<programlisting><![CDATA[psql -U postgres
DROP DATABASE trust;
\q]]></programlisting>
			</para>
		</section>
		<section>
			<title>Resources</title>
			<para>
				As the harvesting of large CRLs can be memory intensive, the JBoss
				Application Server has been tweaked so the JVM has more available
				memory. By default it is set to reserve a total of 1GB of heap
				space. The configuration can be found in
				<code>jboss/bin/run.conf</code>
				See
				<link linkend="links">Useful links</link>
				for more info on tweaking this. The machine hosting the JBoss
				application server should have at least 2 GiB of available memory.
			</para>
			<para>
				As to the amount of network traffic, this is highly related as
				to how CRL caching is configured.
			</para>
			<para>
				The default connection pool size is 20. The maximum size of the
				database depends on the used DBMS and is approximately 4 GiB. Since
				the database mainly contains data which is available in the public
				CRLs, no extra backup strategy is required.
			</para>
			<para>
				The application is using local storage for storing the
				temporary CRL downloads. Furthermore the JMS implementation of JBoss
				(HornetQ) is also using local storage for its journals.
			</para>
			<para>
				The application requires a private key (JKS, PKCS#12 or PKCS#11
				are possible) to be able to sign outgoing XKMS responses
				(WS-Security based message signing). The eID Trust Service also
				offers a proxy OCSP Responder. This proxy OCSP Responder is also
				using the service identity to sign the OCSP responses.
			</para>
			<para>
				One can use the
				<code>jvisualvm</code>
				tool that comes with the Sun JDK to inspect the local running JBoss
				application server. Connect to a remote server via:
				<programlisting><![CDATA[ssh -X 192.168.1.101
jvisualvm &]]></programlisting>
				Different plugins can be configured as part of
				<code>jvisualvm</code>
				to enhance its monitoring capabilities.
			</para>
		</section>
		<section>
			<title>Clustering</title>
			<para>
				Following is needed for a basic clustering with load balancing
				setup. Since JBoss 6 M1, clustering has been simplified via
				<code>mod_cluster</code>
				. Unlike
				<code>mod_jk</code>
				and
				<code>mod_proxy</code>
				,
				<code>mod_cluster</code>
				leverages an additional connection between the application server
				nodes and httpd. The application server nodes use this connection to
				transmit server-side load balance factors and lifecycle events back
				to httpd via a custom set of HTTP methods, affectionately called the
				Mod-Cluster Management Protocol (MCMP). This additional feedback
				channel allows mod_cluster to offer a level of intelligence and
				granularity not found in other load balancing solutions.
			</para>
			<section>
				<title>JBoss Configuration</title>
				<para>
					Since JBoss 6 M1 clustering has been included in all of its
					profiles. Activating clustered mode for your JBoss AS as follows:
					<programlisting><![CDATA[
						> vim jboss/server/default/deploy/jbossweb.sar/META-INF/jboss-beans.xml
						// uncomment: <!--depends>ModClusterListener</depends-->
						
						> vim jboss/server/default/deploy/mod_cluster.sar/META-INF/mod_cluster-jboss-beans.xml
						// change: 
						//   <parameter><inject bean="ModClusterService"/></parameter>
						// to:
						//   <parameter><inject bean="HAModClusterService"/></parameter>
						//
						// change:
						//  <property name="advertise">${jboss.mod_cluster.advertise.enabled:false}</property>
						// to:
						// <property name="advertise">true</property>
					]]></programlisting>
					The advertise property is to make sure that the
					<code>HAModClusterService</code>
					discovers the httpd front-end through the
					<code>mod_advertise</code>
					module. It is also possible to specify the httpd servers statically
					if wanted using:
					<programlisting><![CDATA[<property name="proxyList">${jboss.mod_cluster.proxyList:}</property>]]></programlisting>
					Now different JBoss AS's within the same network will auto-discover
					each other and form a cluster.
				</para>
				<para>
					By default sticky sessions will be enabled. Yet at the time of
					writing their is an issue in
					<code>mod_cluster</code>
					if you do not explicitely specify a
					<code>jvmRoute</code>
					. See
					<ulink url="https://jira.jboss.org/jira/browse/MODCLUSTER-146">MODCLUSTER-146</ulink>
					for more info. Do this as follows:
					<programlisting><![CDATA[> vim jboss/server/all/deploy/jbossweb.sar/server.xml
// add jvmRoute="node01" in <Engine name="jboss.web" ... >]]></programlisting>
				</para>
			</section>
			<section>
				<title>Httpd Configuration</title>
				<para>
					First you will have to download the
					<code>mod_cluster</code>
					's needed Apache modules @
					<ulink url="http://www.jboss.org/mod_cluster">mod_cluster</ulink>
					.
					After having completed the installation, here is a basic
					<code>httpd.conf</code>
					setup:
					<programlisting><![CDATA[LoadModule proxy_module /opt/jboss/httpd/lib/httpd/modules/mod_proxy.so
LoadModule proxy_ajp_module /opt/jboss/httpd/lib/httpd/modules/mod_proxy_ajp.so
LoadModule slotmem_module /opt/jboss/httpd/lib/httpd/modules/mod_slotmem.so
LoadModule manager_module /opt/jboss/httpd/lib/httpd/modules/mod_manager.so
LoadModule proxy_cluster_module /opt/jboss/httpd/lib/httpd/modules/mod_proxy_cluster.so
LoadModule advertise_module /opt/jboss/httpd/lib/httpd/modules/mod_advertise.so

LogLevel debug

CreateBalancers 1

<VirtualHost *:80>

  <Location /mod_cluster-manager>
    SetHandler mod_cluster-manager

    Order deny,allow
    Deny from all
    Allow from all
#    Allow from 192.168.7.
  </Location>

  <Directory />
     Order deny,allow
     Deny from all
     Allow from all
  </Directory>

  ProxyPass /eid-trust-service-admin-portal balancer://mycluster/eid-trust-service-admin-portal

  KeepAliveTimeout 60
  MaxKeepAliveRequests 0
  ManagerBalancerName mycluster
  AdvertiseFrequency 5

</VirtualHost>]]></programlisting>
					Beware in this setup the mod_cluster-manager is set open for
					testing purposes. This way you can view the connected nodes @
					<code>./mod_cluster-manager</code>
					. More information on more advanced setups can be found in the
					<link linkend="links">Useful links</link>
					section.
				</para>
			</section>
		</section>
		<section>
			<title>Starting</title>
			<para>
				The eID Trust Service JBoss distribution comes with two JBoss
				configurations. The
				<code>default</code>
				configuration and the
				<code>all</code>
				configuration. Use the
				<code>all</code>
				configuration if you are interested in running the eID Trust Service
				as part of a cluster.
			</para>
			<para>
				After you have correctly setup your database, you can start the
				application server by executing the following command:
				<programlisting><![CDATA[./jboss/bin/run.sh -b 0.0.0.0 &]]></programlisting>
				. Or in case you want to run the JBoss configuration that enables
				clustering, you start via:
				<programlisting><![CDATA[./jboss/bin/run.sh -b 0.0.0.0 -c all &]]></programlisting>
				The option
				<code>-b 0.0.0.0</code>
				changes the bind address of the server so it becomes available on
				all interfaces. This option is not necessary when using an AJP
				front-end web server.
			</para>
			<para>
				Background processes can easily be managed using
				<code>screen</code>
				. First you start screen via:
				<programlisting><![CDATA[screen]]></programlisting>
				Then start the JBoss application server via
				<programlisting><![CDATA[./jboss/bin/run.sh]]></programlisting>
				Detach the screen via
				<code>Ctrl-a d</code>
				. List the available screen processes via
				<programlisting><![CDATA[screen -ls]]></programlisting>
				Re-attach to a background screen process via
				<programlisting><![CDATA[screen -r <screen process name>]]></programlisting>
			</para>
			<warning>
				<title>eID Trust Service Administrator registration</title>
				<para>
					The first time you start the eID Trust Service you should
					register a trust service administrator via the admin portal.
				</para>
			</warning>
			<para>
				After the application has started, it will have initialized itself
				with 4 trust domains.
				<orderedlist>
					<listitem>
						<para>
							eID Authentication Trust Domain ( machine domain name
							BE-AUTH )
						</para>
					</listitem>
					<listitem>
						<para>
							eID Non Repudiation Trust Domain ( machine domain name BE )
						</para>
					</listitem>
					<listitem>
						<para>
							eID National Registry Trust Domain ( machine domain name
							BE-NAT-REG )
						</para>
					</listitem>
					<listitem>
						<para>
							Belgian TSA Trust Domain ( machine domain name BE-TSA )
						</para>
					</listitem>
				</orderedlist>
			</para>
			<para>
				The default trust domain will be set to the eID Authentication
				Trust Domain.
			</para>
			<para>
				In order to function properly, the application needs to be able
				to make outgoing calls for CRL, OCSP. If you are running behind a
				proxy, you can setup the proxy using the administration portal.
				Optionally the application also needs to be able to make outgoing
				calls for TSP or NTP.
			</para>
			<para>
				CRL download URLs for the Belgian eID Trust Domains are typically
				something like
				<code>http://crl.eid.belgium.be/eidc200501.crl</code>
				. The URL is retrieved from the validated certificate chain.
			</para>
			<para>
				OCSP requests for the Belgian eID Trust Domains are typically sent
				to
				<code>http://ocsp.eid.belgium.be</code>
				. The URL is again retrieved from the validated certificate chain.
			</para>
			<para>
				TSP requests can be used for clock drift detection. The
				location is configurable in the Administrator portal.
			</para>
			<para>
				The NTP protocol can also be used for clock drift detection.
				The location is configurable in the Administrator portal.
			</para>
		</section>
		<section>
			<title>Stopping</title>
			<para>
				Graceful shutdown can be accomplished via:
				<programlisting><![CDATA[./jboss/bin/shutdown.sh -S]]></programlisting>
				After this you can check if shutdown completed properly via:
				<programlisting><![CDATA[ps -ef | grep java]]></programlisting>
			</para>
		</section>
		<section>
			<title>Init script for Redhat (Fedora)</title>
			<para>
				Copy the orginal supplied init script:
				<programlisting><![CDATA[cp $JBOSS_HOME/bin/jboss_init_redhat.sh /etc/init.d/jboss]]></programlisting>
				Change the permissions on the new jboss init script:
				<programlisting><![CDATA[sudo chmod 755 /etc/init.d/jboss]]></programlisting>
				You might need to changed the following in the JBoss script:
				<programlisting><![CDATA[#!/bin/sh
# chkconfig: 345 90 10
# description: JBoss AS eID Services
# processname: jboss
...
JBOSS_HOME="location of your JBoss distribution"
JBOSS_USER="the user that will be used to run the JBoss application server under"
JAVAPTH="the location of your JVM"
JBOSS_CONF="default"
...]]></programlisting>
				To bind to the correct IP address, modify the line:
				<programlisting><![CDATA[JBOSS_BIND_ADDR=${JBOSS_HOST:+"-b $JBOSS_HOST"}]]></programlisting>
				to
				<programlisting><![CDATA[JBOSS_BIND_ADDR=${JBOSS_BIND_ADDR:-"-b your.ip.address.here"}]]></programlisting>
				To get a log file, modify the line:
				<programlisting><![CDATA[JBOSS_CONSOLE=${JBOSS_CONSOLE:-"/dev/null"}]]></programlisting>
				to
				<programlisting><![CDATA[JBOSS_CONSOLE=${JBOSS_CONSOLE:-"/location/of/your/logs/jboss-console.log"]]></programlisting>
				Register the jboss service as followes
				<programlisting><![CDATA[chkconfig --add jboss
chkconfig --list jboss]]></programlisting>
				Start and stop the jboss service via
				<programlisting><![CDATA[service jboss start
service jboss stop]]></programlisting>
			</para>
			<para>
				You can change the temporary directory used by the JVM to store the
				CRL files and such via:
				<programlisting><![CDATA[JBOSSSH ... -Djava.io.tmpdir=...]]></programlisting>
			</para>
		</section>
	</section>
	<section>
		<title>Configuration</title>
		<section>
			<title>Transaction timeouts</title>
			<para>
				The downloading and processing of large CRLs can take a lot of time.
				This can lead to MDB transaction timeouts. By default, the custom
				JBoss MySQL and Oracle Distributions have a transaction timeout
				configured of 1200 seconds or 20 minutes. This should be sufficient.
				If this still proves to be insufficient, this can be changed in
				<code>jboss/server/default/deploy/transaction-jboss-beans.xml</code>
				.
				Look for the following line and change accordingly:
				<programlisting role="XML"><![CDATA[<property name="defaultTimeout">1200</property>]]></programlisting>
				. After changing this the JBoss Application Server has to be
				restarted as followed:
				<programlisting><![CDATA[./jboss/bin/shutdown.sh -S
./jboss/bin/run.sh -b 0.0.0.0]]></programlisting>
				Please check if the shutdown was completed before restarting.
			</para>
		</section>
		<section>
			<title>Configuring Redhat (Fedora) as an eID Trust Service</title>
			<para>
				The network interface should not be managed by the NetworkManager
				but should start at boot time. Check that
				<code>/etc/sysconfig/network_scripts/ifcfg_eth0</code>
				contains the following lines:
				<programlisting><![CDATA[ONBOOT=yes
NM_CONTROLLED=no
USERCTL=no]]></programlisting>
				Disable the graphical user interface at startup by setting the
				runlevel in
				<code>/etc/inittab</code>
				to 3:
				<programlisting><![CDATA[id:3:initdefault:]]></programlisting>
			</para>
		</section>
		<section>
			<title>Configuration of the NTP-client on Redhat (Fedora)</title>
			<para>
				The eID Trust Service functionality is very dependent on a
				correct local time.
			</para>
			<para>
				Configure your NTP servers via
				<code>/etc/ntp.conf</code>
				.
				Configure the NTP client service via:
				<programlisting><![CDATA[sudo chkconfig --level 345 ntpd on
chkconfig --list ntpd]]></programlisting>
				Start the NTP service via:
				<programlisting><![CDATA[sudo /etc/init.d/ntpd start]]></programlisting>
				.
				Check whether the local clock is correctly synchronized via:
				<programlisting><![CDATA[ntpdate -q your.ntp.server.com]]></programlisting>
			</para>
		</section>
		<section>
			<title>JBoss Logging</title>
			<para>
				The JBoss Application Server's logging configuration can be found in
				<code>jboss/server/default/deploy/jboss-logging.xml</code>
				.
				All logging from the Fedict eID Trust Service components is
				configured to output to a seperate log file which can be found in
				<code>jboss/server/default/log/fedict.log</code>
				.
				By default the logging granularity is set to
				<code>DEBUG</code>
				. You can change this by changing the level of the configured Fedict
				logger:
				<programlisting><![CDATA[<logger category="be.fedict">
	<level name="DEBUG" />
	<handlers>
		<handler-ref name="FEDICT" />
	</handlers>
</logger>]]></programlisting>
				In the same way you can change JBoss' logging too.
				<note>
					<title>Production configuration</title>
					<para>
						For production configurations you should change the logging from
						<code>DEBUG</code>
						to
						<code>ERROR</code>
						.
					</para>
				</note>
			</para>
		</section>
	</section>
	<section>
		<title>Administration</title>
		<section>
			<title>Database</title>
			<para>
				To view the contents of the database behind the Fedict eID Trust
				Service, one can use the
				<ulink url="http://www.squirrelsql.org/">SQuirrel SQL Client</ulink>
				. This SQL client allows you to view the structure of any database
				that comes with a JDBC driver.
			</para>
			<para>
				To be able to connect to your HSQL/MySQL/Oracle database you will
				need to configure a JDBC driver. You can download the drivers @
				<ulink url="http://www.mysql.com/downloads/connector/j/">MySQL JDBC Driver</ulink>
				and
				<ulink
					url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html">
					Oracle JDB Driver
				</ulink>
				.
				Configure your driver in SQuirrel SQL by selecting the appropriate
				one, select
				<code>Modify Driver...</code>
				and add your JDBC driver JAR in the
				<code>Extra Class Path</code>
				tab.
			</para>
			<para>
				When you are done with this, you can configure the connection to the
				database by adding a new
				<code>Alias</code>
				. Select the appropriate driver, and configure the URL, username and
				password as is configured in the Fedict eID Trust Service datasource
				file (
				<code>jboss/server/default/deploy/trust-service-ds.xml</code>
				).
			</para>
		</section>
		<section>
			<title>Administration Portal</title>
			<para>
				The Fedict eID Trust Service comes with an administration
				portal. This portal allows you to setup your network proxy if any,
				manage trust domains and other aspects of the service.
			</para>
			<section>
				<title>Administrator registration</title>
				<para>
					To login into the administrator portal, an eID authentication
					will be performed. If the service was freshly installed, the first
					successfully authenticated user will be automatically registered as
					administrator. Subsequent administrators will have to be accepted
					by this one. Performing a login will add you as a pending
					administrator which can subsequently be approved by another
					existing administrator.
				</para>
			</section>
			<section>
				<title>Configuration</title>
				<section id="config_admin">
					<title id="config_admin.title">Administrators</title>
					<para>
						Here you can view existing and pending administrators,
						approve pending administrators, remove administrators.
					</para>
				</section>
				<section>
					<title>WS-Security Configuration</title>
					<para>
						The eID Trust Service Validation Web Service has the
						possibility to optionally sign its response message using
						WS-Security. The keystore to be used for this can be configured
						via the admin portal. There is support for JKS, PKCS#11 and
						PKCS#12 keystores. The keystore path in case of PKCS#11 is the
						path to the configuration file which will be used by the Sun
						PKCS#11 provider.
					</para>
					<para>
						The proxy OCSP Responder is also using this service identity
						for signing the OCSP responses.
					</para>
				</section>
				<section>
					<title>Network Configuration</title>
					<para>
						If you are operating behind a proxy, you can setup this in
						here and enable or disable the proxy configuration. The proxy
						configuration is used for CRL downloads and for OCSP requests.
					</para>
				</section>
				<section>
					<title>Clock Drift Detection</title>
					<para>
						The Fedict eID Trust Service comes with built in support for
						NTP and TSP. TSP or Timestamp Protocol is a protocol used for
						certifying timestamps. A timestamp request will be sent to the
						configured TSA server, returning a timestamp response containing a
						timestamp token. The received timestamp token will be used for
						clock drift detection.
					</para>
					<para>
						You can configure the times when to perform the clock drift
						detection check using a cron-like expression string. See
						<link linkend="cron">Cron schedules</link>
						for more info.
					</para>
				</section>
				<section>
					<title>Information Message</title>
					<para>
						The information message to be shown on
						<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-portal</code>
						can be configured here for all available languages of the Fedict
						eID Trust Service Portal.
					</para>
				</section>
			</section>
			<section>
				<title>Virtual Trust Domains</title>
				<para>
					Virtual trust domains are a group of existing trust domains.
					Users of the eID Trust Service Validation Web Service have the
					possibility to specify a virtual trust domain to validate against.
				</para>
			</section>
			<section>
				<title>Trust Domains</title>
				<para>
					You can add, modify, remove trust domains here. Also you can set
					the default trust domain for the Fedict eID Trust Service. This
					trust domain will be used in the eID Trust Service Validation Web
					Service if no trust domain was specified. For each trust domain you
					can specify whether or not CRL caching should be used, which trust
					points lie under this trust domain and which certificate contraints
					are too be enforced when validating against this trust domain. See
					<link linkend="cron">Cron schedules</link>
					for more info.
				</para>
			</section>
			<section>
				<title>Trust Points</title>
				<para>
					For each trust point, you can specify a cron expression for
					specifying the CRL cache cron schedule interval. This includes
					refreshing all underlying CA's that have been cached. You can also
					refresh the CRL cache immediately here for debugging purposes. For
					each trust point you can see the list of CA's associated with this
					trust point and for each CA you can refresh the cache individually.
				</para>
			</section>
			<section>
				<title>CRL Cache</title>
				<para>
					The CRL Cache page gives you an overview of the state of the
					CRL cache on a per CA basis. Per CA you can manually trigger a
					refresh of its CRL cache, or remove its CRL cache altogether.
				</para>
				<para>
					Because the proxy OCSP Responder requires all used
					intermediate CA's to be known within the eID Trust Service, you can
					also cold start the CRL Cache from this page.
				</para>
			</section>
			<section>
				<title>Audit logging</title>
				<para>
					Following events will be logged by the FedICT eID Trust Service and
					can be consulted in the admin portal.
					<itemizedlist>
						<listitem>
							<para>Error contacting NTP server</para>
						</listitem>
						<listitem>
							<para>Maximum clock offset reached</para>
						</listitem>
						<listitem>
							<para>Failed to download CRL for CA=...</para>
						</listitem>
						<listitem>
							<para>Invalid CRL for CA=...</para>
						</listitem>
						<listitem>
							<para>Failed to parse CRL for CA=...</para>
						</listitem>
						<listitem>
							<para>Failed to notify harvester for CA=...</para>
						</listitem>
						<listitem>
							<para>Default trust domain not set</para>
						</listitem>
						<listitem>
							<para>CA not found for ...</para>
						</listitem>
					</itemizedlist>
				</para>
			</section>
			<section>
				<title>SNMP</title>
				<para>
					The Fedict eID Trust Service has several SNMP counters available to
					monitor the health of the application. These counters can be
					retrieved by invoking the command:
					<programlisting role="XML"><![CDATA[snmpget -v 2c -c public localhost:7894 1.3.6.1.4.1.7890.0.0]]></programlisting>
					. The available SNMP counters are:
					<itemizedlist>
						<listitem>
							<para># of validations ( OID = 1.3.6.1.4.1.7890.0.0 )</para>
						</listitem>
						<listitem>
							<para># of CRL cache refreshes ( OID = 1.3.6.1.4.1.7890.1.0 )
							</para>
						</listitem>
						<listitem>
							<para># of CRL cache hits ( OID = 1.3.6.1.4.1.7890.2.0 )</para>
						</listitem>
						<listitem>
							<para># of CRL cache misses ( OID = 1.3.6.1.4.1.7890.3.0 )</para>
						</listitem>
						<listitem>
							<para>CRL cache hit % ( OID = 1.3.6.1.4.1.7890.4.0 )</para>
						</listitem>
						<listitem>
							<para># of CRL download failures ( OID = 1.3.6.1.4.1.7890.5.0 )
							</para>
						</listitem>
						<listitem>
							<para># of OCSP request failures ( OID = 1.3.6.1.4.1.7890.6.0 )
							</para>
						</listitem>
					</itemizedlist>
					Install the SNMP tools on RedHat (Fedora) via:
					<programlisting><![CDATA[sudo yum install net-snmp-utils.i686]]></programlisting>
					Check all available SNMP counters via:
					<programlisting><![CDATA[snmpwalk -v 2c -c public localhost:7894 1.3.6.1.4.1.7890]]></programlisting>
				</para>
			</section>
			<section id="cron">
				<title>CRON expression</title>
				<para>
					You can specify a cron-like expression for the clock drift
					detection task and for each trust point's cache refreshment. So for
					example:
					<code>0 0 0/3 * * *</code>
					is valid and represents, every 3 hours. The cron schedule string
					consist of following fields.
					<table>
						<title>All cron fields and default values.</title>
						<tgroup cols="3">
							<colspec colwidth="2*" />
							<colspec colwidth="2*" />
							<colspec colwidth="2*" />
							<thead>
								<row>
									<entry>Attribute</entry>
									<entry>Allowable Values</entry>
									<entry>Default</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>Second</entry>
									<entry>[0,59]</entry>
									<entry>0</entry>
								</row>
								<row>
									<entry>Minute</entry>
									<entry>[0,59]</entry>
									<entry>0</entry>
								</row>
								<row>
									<entry>Hour</entry>
									<entry>[0,23]</entry>
									<entry>0</entry>
								</row>
								<row>
									<entry>dayOfMonth</entry>
									<entry>[1,31]</entry>
									<entry>*</entry>
								</row>
								<row>
									<entry>Month</entry>
									<entry>[1,12]</entry>
									<entry>*</entry>
								</row>
								<row>
									<entry>dayOfWeek</entry>
									<entry>[0,7]</entry>
									<entry>*</entry>
								</row>
								<row>
									<entry>Year</entry>
									<entry>A four-digit calendar year</entry>
									<entry>*</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					For a more complete view of what is allowed, check the EJB 3.1
					specification's TimerService/ScheduleExpression section.
				</para>
			</section>
		</section>
		<section>
			<title>Sanity checks</title>
			<para>
				To check whether an installed eID Trust Service instance
				operates
				normally you can try to validate your eID certificates via
				the eID
				Trust Service portal. This portal is available at:
				<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-portal/</code>
				. The following page can be used to check whether the eID Trust
				Service instance is still alive:
				<code>$EID_TRUST_SERVICE_ADDRESS/eid-trust-service-portal/main.seam
				</code>
			</para>
		</section>
		<section>
			<title>Test eID Cards</title>
			<para>
				For the eID Trust Service to be able to accept test eID cards, you
				need to configure a trust domain for this. Per default the eID Trust
				Service comes pre-configured with a
				<code>BE-TEST</code>
				trust domain that accepts test eID cards. Most important aspect when
				configuring a trust domain for test eID cards is that you configure
				the right certificate policy OID as
				<programlisting><![CDATA[2.16.56.1.40.40.40.1]]></programlisting>
				and that you of course add the
				<code>eID test Root CA</code>
				as trust point.
			</para>
		</section>
	</section>
	<section>
		<title>Monitoring</title>
		<para>
			Measuring the application performance can be a very important asset
			for troubleshooting and maintenance.
			<code>collectd</code>
			is a very good utility for measuring all kinds of metrics on your
			server, from system level metrics utilisation to application level
			JMX parameters. While
			<code>collectd</code>
			is great for measuring, transporting and storage of metrics, it
			offers little support for alerting and notifications.
		</para>
		<para>
			You probably will have to compile
			<code>collectd</code>
			yourself to have the Java plugin enabled. First install some required
			dependencies:
			<programlisting><![CDATA[yum install rrdtool-devel.x86_64
yum install libcurl-devel.x86_64
yum install OpenIPMI-devel.x86_64]]></programlisting>
			Configure, build and install
			<code>collectd</code>
			via:
			<programlisting><![CDATA[./configure --enable-java --with-java=/usr/local/jdk1.6.0_33
make
sudo make install]]></programlisting>
			Next listing gives an example configuration of
			<code>/opt/collectd/etc/collectd.conf</code>
			.
			<programlisting><![CDATA[Interval 60

LoadPlugin disk
<Plugin disk>
    Disk "sda" 
</Plugin>

LoadPlugin "logfile" 
<Plugin "logfile">
    LogLevel "info" 
    File "/opt/collectd/var/log/collectd.log" 
    Timestamp true
</Plugin>

LoadPlugin "rrdtool" 
<Plugin "rrdtool">
    DataDir "/opt/collectd/var/lib/collectd/rrd" 
    CacheFlush 120
    WritesPerSecond 50
</Plugin>

LoadPlugin "cpu" 
LoadPlugin "df" 
LoadPlugin "memory" 
LoadPlugin "swap" 

LoadPlugin "java" 
<Plugin "java">
    JVMARG "-Djava.class.path=/opt/collectd/share/collectd/java/collectd-api.jar:/opt/collectd/share/collectd/java/generic-jmx.jar" 
    LoadPlugin "org.collectd.java.GenericJMX" 
    <Plugin "GenericJMX">
        <MBean "memory_pool">
            ObjectName "java.lang:type=MemoryPool,*" 
            Instanceprefix "memory_pool-" 
            InstanceFrom "name" 
            <Value>
                Type "memory" 
                Table true
                Attribute "Usage" 
            </Value>
        </MBean>
        <MBean "classes">
              ObjectName "java.lang:type=ClassLoading" 
              InstancePrefix "classes" 
              <Value>
                    Type "gauge" 
                    InstancePrefix "loaded_classes" 
                    Table false
                    Attribute "LoadedClassCount" 
              </Value>
        </MBean>
        <MBean "ajp">
            ObjectName "jboss.web:type=GlobalRequestProcessor,name=ajp-127.0.0.1-8009" 
            InstancePrefix "ajp" 
            <Value>
                Type "derive" 
                InstancePrefix "request_count" 
                Table false
                Attribute "requestCount" 
            </Value>    
        </MBean>
        <Connection>
            Host "localhost" 
            ServiceURL "service:jmx:rmi:///jndi/rmi://localhost:1090/jmxrmi" 
            Collect "memory_pool" 
            Collect "classes" 
            Collect "ajp" 
        </Connection>    
    </Plugin>
</Plugin>]]></programlisting>
			Here we let
			<code>collectd</code>
			to generate RRD files. We also use the JMX plugin to monitor the
			JBoss application server directly. Use the RRDTool for further
			processing of the RRD metric files.
		</para>
	</section>
	<appendix id="links">
		<title>References</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						<ulink
							url="http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html">JVM GC Tuning</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://en.wikipedia.org/wiki/Revocation_list">Certificate Revocation Lists</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://en.wikipedia.org/wiki/OCSP">Online Certificate Status Protocol</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://en.wikipedia.org/wiki/Time_Stamp_Protocol">Timestamp Protocol</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://en.wikipedia.org/wiki/Network_Time_Protocol">Network Time Protocol</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink
							url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta500/html-single/index.html#cluster.chapt">JBoss Clustering</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://www.jboss.org/mod_cluster.html">JBoss mod_cluster</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<ulink url="http://jcp.org/en/jsr/detail?id=318">EJB 3.1 specification</ulink>
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</appendix>
	<appendix>
		<title>eID Trust Service Admin Manual License</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc.logo.large.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the Creative Commons license.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="share.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You are free to Share — to copy, distribute and transmit the work.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="by.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You must attribute the work in the manner specified by the author or
			licensor (but not in any way that suggests that they endorse you or
			your use of the work).
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nc.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not use this work for commercial purposes.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nd.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not alter, transform, or build upon this work.
		</para>
		<para>
			More information about the Creative Commons license conditions can be
			found at
			<ulink url="http://creativecommons.org/">Creative Commons organization</ulink>
			.
		</para>
	</appendix>
	<appendix>
		<title>eID Trust Service License</title>
		<para>
			The eID Trust Service source code has been released under the
			GNU LGPL version 3.0.
		</para>
		<para>
			<code>
				This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version 3.0
				as published by the Free Software Foundation.
			</code>
		</para>
		<para>
			<code>
				This software is distributed in the hope that it will be
				useful, but WITHOUT ANY WARRANTY; without even the implied warranty
				of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public License for more details.
			</code>
		</para>
		<para>
			<code>
				You should have received a copy of the GNU Lesser General
				Public License along with this software; if not, see
				http://www.gnu.org/licenses/.
			</code>
		</para>
	</appendix>
	<appendix>
		<title>Revision history</title>
		<table>
			<title>Revision history</title>
			<tgroup cols="3">
				<colspec colwidth="1*" />
				<colspec colwidth="1*" />
				<colspec colwidth="2*" />
				<thead>
					<row>
						<entry>Date</entry>
						<entry>Author</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>16 Mar 2010</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>Initial version.</entry>
					</row>
					<row>
						<entry>22 Apr 2010</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>Feedback FedICT.</entry>
					</row>
					<row>
						<entry>12 May 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>PostgreSQL.</entry>
					</row>
					<row>
						<entry>3 Jun 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>JVM, logging, init scripts.</entry>
					</row>
					<row>
						<entry>27 Oct 2010</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>RFC.3: Cron schedule.</entry>
					</row>
					<row>
						<entry>21 Dec 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>JBoss configurations.</entry>
					</row>
					<row>
						<entry>8 Feb 2011</entry>
						<entry>Frank Cornelis</entry>
						<entry>Various improvements.</entry>
					</row>
					<row>
						<entry>29 Jun 2012</entry>
						<entry>Frank Cornelis</entry>
						<entry>Various updates.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</appendix>
</article>
